; ModuleID = 'Mini C Compiler'
source_filename = "Mini C Compiler"

@array = global [10000 x i32] zeroinitializer
@output = global [10000 x i32] zeroinitializer
@count = global [10 x i32] zeroinitializer

define i32 @getMax(i32 %n) {
entry:
  %i2 = alloca i32
  %i = alloca i32
  %start = alloca i32
  %mx = alloca i32
  %n1 = alloca i32
  store i32 %n, i32* %n1
  store i32 0, i32* %mx
  store i32 0, i32* %start
  store i32 0, i32* %i
  %0 = load i32, i32* %start
  store i32 0, i32* %start
  %1 = load i32, i32* %start
  %array_Index = getelementptr [10000 x i32], [10000 x i32]* @array, i32 0, i32 %1
  %2 = load i32, i32* %array_Index
  %3 = load i32, i32* %mx
  store i32 %2, i32* %mx
  store i32 1, i32* %i2
  br label %loop

loop:                                             ; preds = %ifcont, %entry
  %i3 = phi i32 [ 1, %entry ], [ %NextVal, %ifcont ]
  %4 = load i32, i32* %n1
  %5 = load i32, i32* %i2
  %array_Index4 = getelementptr [10000 x i32], [10000 x i32]* @array, i32 0, i32 %5
  %6 = load i32, i32* %array_Index4
  %7 = load i32, i32* %mx
  %gtcompare = icmp sgt i32 %6, %7
  br i1 %gtcompare, label %if, label %ifcont

afterloop:                                        ; preds = %ifcont
  %8 = load i32, i32* %mx
  ret i32 %8

if:                                               ; preds = %loop
  %9 = load i32, i32* %i2
  %array_Index5 = getelementptr [10000 x i32], [10000 x i32]* @array, i32 0, i32 %9
  %10 = load i32, i32* %array_Index5
  %11 = load i32, i32* %mx
  store i32 %10, i32* %mx
  br label %ifcont

ifcont:                                           ; preds = %if, %loop
  %i6 = load i32, i32* %i2
  %NextVal = add i32 %i6, 1
  store i32 %NextVal, i32* %i2
  %loopcondition = icmp slt i32 %NextVal, %4
  br i1 %loopcondition, label %loop, label %afterloop
}

define void @countSort(i32 %n, i32 %exp) {
entry:
  %i42 = alloca i32
  %temp = alloca i32
  %idx2 = alloca i32
  %idx29 = alloca i32
  %i25 = alloca i32
  %idx18 = alloca i32
  %i14 = alloca i32
  %idx = alloca i32
  %i6 = alloca i32
  %i3 = alloca i32
  %i = alloca i32
  %exp2 = alloca i32
  %n1 = alloca i32
  store i32 %n, i32* %n1
  store i32 %exp, i32* %exp2
  store i32 0, i32* %i
  store i32 0, i32* %i3
  br label %loop

loop:                                             ; preds = %loop, %entry
  %i4 = phi i32 [ 0, %entry ], [ %NextVal, %loop ]
  %0 = load i32, i32* %i3
  %count_Index = getelementptr [10 x i32], [10 x i32]* @count, i32 0, i32 %0
  %1 = load i32, i32* %count_Index
  store i32 0, i32* %count_Index
  %i5 = load i32, i32* %i3
  %NextVal = add i32 %i5, 1
  store i32 %NextVal, i32* %i3
  %loopcondition = icmp slt i32 %NextVal, 10
  br i1 %loopcondition, label %loop, label %afterloop

afterloop:                                        ; preds = %loop
  store i32 0, i32* %i6
  br label %loop7

loop7:                                            ; preds = %loop7, %afterloop
  %i9 = phi i32 [ 0, %afterloop ], [ %NextVal12, %loop7 ]
  %2 = load i32, i32* %n1
  store i32 0, i32* %idx
  %3 = load i32, i32* %i6
  %array_Index = getelementptr [10000 x i32], [10000 x i32]* @array, i32 0, i32 %3
  %4 = load i32, i32* %array_Index
  %5 = load i32, i32* %idx
  store i32 %4, i32* %idx
  %6 = load i32, i32* %idx
  %7 = load i32, i32* %exp2
  %division = sdiv i32 %6, %7
  %8 = load i32, i32* %idx
  store i32 %division, i32* %idx
  %9 = load i32, i32* %idx
  %modulus = srem i32 %9, 10
  %10 = load i32, i32* %idx
  store i32 %modulus, i32* %idx
  %11 = load i32, i32* %idx
  %count_Index10 = getelementptr [10 x i32], [10 x i32]* @count, i32 0, i32 %11
  %12 = load i32, i32* %count_Index10
  %addEqualTo = add i32 %12, 1
  store i32 %addEqualTo, i32* %count_Index10
  %i11 = load i32, i32* %i6
  %NextVal12 = add i32 %i11, 1
  store i32 %NextVal12, i32* %i6
  %loopcondition13 = icmp slt i32 %NextVal12, %2
  br i1 %loopcondition13, label %loop7, label %afterloop8

afterloop8:                                       ; preds = %loop7
  store i32 1, i32* %i14
  br label %loop15

loop15:                                           ; preds = %loop15, %afterloop8
  %i17 = phi i32 [ 1, %afterloop8 ], [ %NextVal23, %loop15 ]
  store i32 0, i32* %idx18
  %13 = load i32, i32* %i14
  %subtraction = sub i32 %13, 1
  %14 = load i32, i32* %idx18
  store i32 %subtraction, i32* %idx18
  %15 = load i32, i32* %idx18
  %count_Index19 = getelementptr [10 x i32], [10 x i32]* @count, i32 0, i32 %15
  %16 = load i32, i32* %count_Index19
  %17 = load i32, i32* %i14
  %count_Index20 = getelementptr [10 x i32], [10 x i32]* @count, i32 0, i32 %17
  %18 = load i32, i32* %count_Index20
  %addEqualTo21 = add i32 %18, %16
  store i32 %addEqualTo21, i32* %count_Index20
  %i22 = load i32, i32* %i14
  %NextVal23 = add i32 %i22, 1
  store i32 %NextVal23, i32* %i14
  %loopcondition24 = icmp slt i32 %NextVal23, 10
  br i1 %loopcondition24, label %loop15, label %afterloop16

afterloop16:                                      ; preds = %loop15
  store i32 0, i32* %i25
  br label %loop26

loop26:                                           ; preds = %loop26, %afterloop16
  %i28 = phi i32 [ 0, %afterloop16 ], [ %NextVal40, %loop26 ]
  %19 = load i32, i32* %n1
  store i32 0, i32* %idx29
  store i32 0, i32* %idx2
  store i32 0, i32* %temp
  %20 = load i32, i32* %n1
  %subtraction30 = sub i32 %20, 1
  %21 = load i32, i32* %i25
  %subtraction31 = sub i32 %subtraction30, %21
  %22 = load i32, i32* %idx29
  store i32 %subtraction31, i32* %idx29
  %23 = load i32, i32* %idx29
  %array_Index32 = getelementptr [10000 x i32], [10000 x i32]* @array, i32 0, i32 %23
  %24 = load i32, i32* %array_Index32
  %25 = load i32, i32* %exp2
  %division33 = sdiv i32 %24, %25
  %26 = load i32, i32* %temp
  store i32 %division33, i32* %temp
  %27 = load i32, i32* %temp
  %modulus34 = srem i32 %27, 10
  %28 = load i32, i32* %temp
  store i32 %modulus34, i32* %temp
  %29 = load i32, i32* %temp
  %count_Index35 = getelementptr [10 x i32], [10 x i32]* @count, i32 0, i32 %29
  %30 = load i32, i32* %count_Index35
  %subtraction36 = sub i32 %30, 1
  %31 = load i32, i32* %idx2
  store i32 %subtraction36, i32* %idx2
  %32 = load i32, i32* %i25
  %array_Index37 = getelementptr [10000 x i32], [10000 x i32]* @array, i32 0, i32 %32
  %33 = load i32, i32* %array_Index37
  %34 = load i32, i32* %idx2
  %output_Index = getelementptr [10000 x i32], [10000 x i32]* @output, i32 0, i32 %34
  %35 = load i32, i32* %output_Index
  store i32 %33, i32* %output_Index
  %36 = load i32, i32* %temp
  %count_Index38 = getelementptr [10 x i32], [10 x i32]* @count, i32 0, i32 %36
  %37 = load i32, i32* %count_Index38
  %subEqualTo = sub i32 %37, 1
  store i32 %subEqualTo, i32* %count_Index38
  %i39 = load i32, i32* %i25
  %NextVal40 = add i32 %i39, 1
  store i32 %NextVal40, i32* %i25
  %loopcondition41 = icmp slt i32 %NextVal40, %19
  br i1 %loopcondition41, label %loop26, label %afterloop27

afterloop27:                                      ; preds = %loop26
  store i32 0, i32* %i42
  br label %loop43

loop43:                                           ; preds = %loop43, %afterloop27
  %i45 = phi i32 [ 0, %afterloop27 ], [ %NextVal49, %loop43 ]
  %38 = load i32, i32* %n1
  %39 = load i32, i32* %i42
  %output_Index46 = getelementptr [10000 x i32], [10000 x i32]* @output, i32 0, i32 %39
  %40 = load i32, i32* %output_Index46
  %41 = load i32, i32* %i42
  %array_Index47 = getelementptr [10000 x i32], [10000 x i32]* @array, i32 0, i32 %41
  %42 = load i32, i32* %array_Index47
  store i32 %40, i32* %array_Index47
  %i48 = load i32, i32* %i42
  %NextVal49 = add i32 %i48, 1
  store i32 %NextVal49, i32* %i42
  %loopcondition50 = icmp slt i32 %NextVal49, %38
  br i1 %loopcondition50, label %loop43, label %afterloop44

afterloop44:                                      ; preds = %loop43
  ret void
}

define void @radixsort(i32 %n) {
entry:
  %exp2 = alloca i32
  %exp = alloca i32
  %limit = alloca i32
  %m = alloca i32
  %n1 = alloca i32
  store i32 %n, i32* %n1
  store i32 0, i32* %m
  store i32 0, i32* %limit
  store i32 0, i32* %exp
  %0 = load i32, i32* %limit
  store i32 100000, i32* %limit
  %1 = load i32, i32* %n1
  %2 = load i32, i32* %n1
  %3 = call i32 @getMax(i32 %2)
  %4 = load i32, i32* %m
  store i32 %3, i32* %m
  store i32 1, i32* %exp2
  br label %loop

loop:                                             ; preds = %ifcont, %entry
  %exp3 = phi i32 [ 1, %entry ], [ %NextVal, %ifcont ]
  %5 = load i32, i32* %limit
  %6 = load i32, i32* %m
  %7 = load i32, i32* %exp2
  %division = sdiv i32 %6, %7
  %lecompare = icmp sle i32 %division, 0
  br i1 %lecompare, label %if, label %ifcont

afterloop:                                        ; preds = %ifcont, %if
  ret void

if:                                               ; preds = %loop
  br label %afterloop

ifcont:                                           ; preds = %loop
  %8 = load i32, i32* %n1
  %9 = load i32, i32* %exp2
  %10 = load i32, i32* %n1
  %11 = load i32, i32* %exp2
  call void @countSort(i32 %10, i32 %11)
  %12 = load i32, i32* %exp2
  %mulEqualTo = mul i32 %12, 10
  store i32 %mulEqualTo, i32* %exp2
  %13 = load i32, i32* %exp2
  %subtraction = sub i32 %13, 1
  %14 = load i32, i32* %exp2
  store i32 %subtraction, i32* %exp2
  %exp4 = load i32, i32* %exp2
  %NextVal = add i32 %exp4, 1
  store i32 %NextVal, i32* %exp2
  %loopcondition = icmp slt i32 %NextVal, %5
  br i1 %loopcondition, label %loop, label %afterloop
}

define void @dispArr(i32 %n) {
entry:
  %i2 = alloca i32
  %i = alloca i32
  %n1 = alloca i32
  store i32 %n, i32* %n1
  store i32 0, i32* %i
  store i32 0, i32* %i2
  br label %loop

loop:                                             ; preds = %loop, %entry
  %i3 = phi i32 [ 0, %entry ], [ %NextVal, %loop ]
  %0 = load i32, i32* %n1
  %1 = load i32, i32* %i2
  %array_Index = getelementptr [10000 x i32], [10000 x i32]* @array, i32 0, i32 %1
  %2 = load i32, i32* %array_Index
  %3 = call i32 @displaySameline(i32 %2)
  %i4 = load i32, i32* %i2
  %NextVal = add i32 %i4, 1
  store i32 %NextVal, i32* %i2
  %loopcondition = icmp slt i32 %NextVal, %0
  br i1 %loopcondition, label %loop, label %afterloop

afterloop:                                        ; preds = %loop
  ret void
}

declare i32 @displaySameline(i32)

define void @main() {
entry:
  %i1 = alloca i32
  %i = alloca i32
  %n = alloca i32
  store i32 0, i32* %n
  store i32 0, i32* %i
  %0 = call i32 @getInt()
  %1 = load i32, i32* %n
  store i32 %0, i32* %n
  store i32 0, i32* %i1
  br label %loop

loop:                                             ; preds = %loop, %entry
  %i2 = phi i32 [ 0, %entry ], [ %NextVal, %loop ]
  %2 = load i32, i32* %n
  %3 = call i32 @getInt()
  %4 = load i32, i32* %i1
  %array_Index = getelementptr [10000 x i32], [10000 x i32]* @array, i32 0, i32 %4
  %5 = load i32, i32* %array_Index
  store i32 %3, i32* %array_Index
  %i3 = load i32, i32* %i1
  %NextVal = add i32 %i3, 1
  store i32 %NextVal, i32* %i1
  %loopcondition = icmp slt i32 %NextVal, %2
  br i1 %loopcondition, label %loop, label %afterloop

afterloop:                                        ; preds = %loop
  %6 = load i32, i32* %n
  %7 = load i32, i32* %n
  call void @radixsort(i32 %7)
  %8 = load i32, i32* %n
  %9 = load i32, i32* %n
  call void @dispArr(i32 %9)
  ret void
}

declare i32 @getInt()
